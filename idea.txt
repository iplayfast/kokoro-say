The project is called say and is a speech synthisis system.
The idea here is to conserve memory and time by loading only voices that are needed and having them available for subsequent uses. 

when a voice+lang is used  the socket_path = f"{SOCKET_BASE_PATH}_{voice}_{lang}" which specifies the server that is serving this particular voice and language
we will call this a voice_server.

The steps that follow are:
  1. check to see if that voice_server already exists
	a. If so, we no longer have to load it, but only need to pass it the information to say
	b. If not, then we need to load it into memory, and spawn to it, passing the information to say.
		i. when spawning a new voice_server  we need to see if the kokoro-v0_19.onnx server has been loaded.
			if not, we need to load the kokoro-v0_19.onnx server.
		ii. load the appriate voice_server and spawn it, passing the info to say.
			

  2. when an instruction to say something appears at a voice_server, (assuming it has been previously set up in step 1) it 
	a. checks to see if something is already being said. If so it needs to stop saying it and clear any remaining data. If it is streamed, this must be hanndled correctly. 
	b. Now that voice_server is no longer busy it should then process the new info

For example:
a fresh start
python say.py --voice 3 "hello 1" 
	voice_server for voice 3 (named voice3_server)  does not exist:
		kokoro-v0_19.onnx does not exist so it is spawn.
		kokoro_v0_19.onnx does exist so the voice3_server is spawned.
		voice3_server does exist so it is sent the text "hello 1"
		voice3_server sees the text "hello 1" does not need to stop it's current speech since there is none, and says "hello 1"
		

python say.py --voice 3 "hello 2"
	voice_server for voice 3 (named voice3_server) does exist:
	kokoro_v0_19.onnx does exist so the voice3_server is spawned.
	voice3_server does exist so it is sent the text "hello 2"
	voice3_server sees the text "hello 2" does not need to stop it's current speech since there is none, and says "hello 2"
		

python say.py --voice 2 "hello 3" 
	voice_server for voice 2 (named voice2_server)  does not exist:
		kokoro_v0_19.onnx does exist so the voice2_server is spawned.
		voice2_server does exist so it is sent the text "hello 3"
		voice2_server sees the text "hello 3" does not need to stop it's current speech since there is none, and says "hello 3"
		
cat largefile.txt | python say.py --voice 2
	voice_server for voice 2 (named voice2_server)  does exist:
		voice2_server does exist so it is streamed the text from largefile.txt
		voice2_server sees the text from largefile.txt and starts saying it. 

python say.py --voice 2 "hello 3" 
	voice_server for voice 2 (named voice2_server)  does exist:
		voice2_server does exist so it is sent the text "hello 3"
		voice2_server sees the text  "hello 3" and stops saying the text from largefile.txt and says "hello 3"
		

In this way you can see that once in memory, the servers do not need to reload and are resused. An individual voice can only say one thing at a time, althought this does not preclude two different voices from saying something at the same time.



say.py implements these ideas fairly well, 
api.py needs to be improved.
